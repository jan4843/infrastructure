- name: Install Binary
  ansible.builtin.unarchive:
    src: https://github.com/vectordotdev/vector/releases/download/v{{ vector_version }}/vector-{{ vector_version }}-{{ suffix }}.tar.gz
    dest: /usr/local/bin
    include:
      - ./vector-{{ suffix }}/bin/vector
    owner: root
    group: root
    extra_opts:
      - --transform=s,./vector-{{ suffix }}/bin/vector,vector@{{ vector_version }},
    remote_src: true
    creates: /usr/local/bin/vector@{{ vector_version }}
  vars:
    arch_suffixes:
      x86_64: x86_64-unknown-linux-gnu
      aarch64: aarch64-unknown-linux-gnu
      armv7: armv7-unknown-linux-gnueabihf
    suffix: '{{ arch_suffixes[ansible_architecture] }}'

- name: Link Binary
  ansible.builtin.shell:
    chdir: /usr/local/bin
    cmd: |
      [ "$(realpath vector)" = "$PWD/vector@{{ vector_version }}" ] && exit 100
      rm -r "$(realpath vector)"
      ln -fs vector@{{ vector_version }} vector
  register: result
  changed_when: result.rc != 100
  failed_when: result.rc not in [0, 100]
  notify: restart_vector

- name: Create systemd Service
  ansible.builtin.copy:
    src: vector.service
    dest: /etc/systemd/system/vector.service
    mode: ''
  notify: restart_vector

- name: Create Environment File
  ansible.builtin.copy:
    content: |
      VECTOR_CONFIG=/etc/vector/vector.toml
      SERVICES_ROOT={{ services_root | quote }}
      LOKI_ENDPOINT={{ loki_endpoint | quote }}
    dest: /etc/default/vector
    mode: go-r
  notify: restart_vector

- name: Create Configuration Directory
  ansible.builtin.file:
    path: /etc/vector
    state: directory
    mode: ''

- name: Create Configuration
  ansible.builtin.copy:
    src: vector.toml
    dest: /etc/vector/vector.toml
    mode: ''
  notify: restart_vector

- name: Enable systemd Service
  ansible.builtin.systemd:
    name: vector.service
    daemon_reload: true
    enabled: true
    state: started
